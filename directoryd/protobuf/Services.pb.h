// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Services.proto

#ifndef PROTOBUF_Services_2eproto__INCLUDED
#define PROTOBUF_Services_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace directoryd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Services_2eproto();
void protobuf_AssignDesc_Services_2eproto();
void protobuf_ShutdownFile_Services_2eproto();

class TxtField;
class ServiceRequest;
class ServiceRequest_Register;
class ServiceRequest_Register_Location;
class ServiceRequest_Unregister;
class ServiceRequest_Find;
class ServiceReply;
class ServiceReply_FindResult;
class ServiceReply_FindResult_Location;

enum RequestType {
  REGISTER = 1,
  UNREGISTER = 2,
  FIND = 3,
  HEARTBEAT = 4
};
bool RequestType_IsValid(int value);
const RequestType RequestType_MIN = REGISTER;
const RequestType RequestType_MAX = HEARTBEAT;
const int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestType_descriptor();
inline const ::std::string& RequestType_Name(RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestType_descriptor(), value);
}
inline bool RequestType_Parse(
    const ::std::string& name, RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
// ===================================================================

class TxtField : public ::google::protobuf::Message {
 public:
  TxtField();
  virtual ~TxtField();

  TxtField(const TxtField& from);

  inline TxtField& operator=(const TxtField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxtField& default_instance();

  void Swap(TxtField* other);

  // implements Message ----------------------------------------------

  TxtField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxtField& from);
  void MergeFrom(const TxtField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:directoryd.TxtField)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static TxtField* default_instance_;
};
// -------------------------------------------------------------------

class ServiceRequest_Register_Location : public ::google::protobuf::Message {
 public:
  ServiceRequest_Register_Location();
  virtual ~ServiceRequest_Register_Location();

  ServiceRequest_Register_Location(const ServiceRequest_Register_Location& from);

  inline ServiceRequest_Register_Location& operator=(const ServiceRequest_Register_Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRequest_Register_Location& default_instance();

  void Swap(ServiceRequest_Register_Location* other);

  // implements Message ----------------------------------------------

  ServiceRequest_Register_Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceRequest_Register_Location& from);
  void MergeFrom(const ServiceRequest_Register_Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string resource = 3;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 3;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const char* value, size_t size);
  inline ::std::string* mutable_resource();
  inline ::std::string* release_resource();
  inline void set_allocated_resource(::std::string* resource);

  // @@protoc_insertion_point(class_scope:directoryd.ServiceRequest.Register.Location)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_resource();
  inline void clear_has_resource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* resource_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceRequest_Register_Location* default_instance_;
};
// -------------------------------------------------------------------

class ServiceRequest_Register : public ::google::protobuf::Message {
 public:
  ServiceRequest_Register();
  virtual ~ServiceRequest_Register();

  ServiceRequest_Register(const ServiceRequest_Register& from);

  inline ServiceRequest_Register& operator=(const ServiceRequest_Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRequest_Register& default_instance();

  void Swap(ServiceRequest_Register* other);

  // implements Message ----------------------------------------------

  ServiceRequest_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceRequest_Register& from);
  void MergeFrom(const ServiceRequest_Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceRequest_Register_Location Location;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .directoryd.ServiceRequest.Register.Location location = 2;
  inline int location_size() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline const ::directoryd::ServiceRequest_Register_Location& location(int index) const;
  inline ::directoryd::ServiceRequest_Register_Location* mutable_location(int index);
  inline ::directoryd::ServiceRequest_Register_Location* add_location();
  inline const ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceRequest_Register_Location >&
      location() const;
  inline ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceRequest_Register_Location >*
      mutable_location();

  // repeated .directoryd.TxtField txt = 3;
  inline int txt_size() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 3;
  inline const ::directoryd::TxtField& txt(int index) const;
  inline ::directoryd::TxtField* mutable_txt(int index);
  inline ::directoryd::TxtField* add_txt();
  inline const ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >&
      txt() const;
  inline ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >*
      mutable_txt();

  // @@protoc_insertion_point(class_scope:directoryd.ServiceRequest.Register)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceRequest_Register_Location > location_;
  ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField > txt_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceRequest_Register* default_instance_;
};
// -------------------------------------------------------------------

class ServiceRequest_Unregister : public ::google::protobuf::Message {
 public:
  ServiceRequest_Unregister();
  virtual ~ServiceRequest_Unregister();

  ServiceRequest_Unregister(const ServiceRequest_Unregister& from);

  inline ServiceRequest_Unregister& operator=(const ServiceRequest_Unregister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRequest_Unregister& default_instance();

  void Swap(ServiceRequest_Unregister* other);

  // implements Message ----------------------------------------------

  ServiceRequest_Unregister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceRequest_Unregister& from);
  void MergeFrom(const ServiceRequest_Unregister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:directoryd.ServiceRequest.Unregister)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceRequest_Unregister* default_instance_;
};
// -------------------------------------------------------------------

class ServiceRequest_Find : public ::google::protobuf::Message {
 public:
  ServiceRequest_Find();
  virtual ~ServiceRequest_Find();

  ServiceRequest_Find(const ServiceRequest_Find& from);

  inline ServiceRequest_Find& operator=(const ServiceRequest_Find& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRequest_Find& default_instance();

  void Swap(ServiceRequest_Find* other);

  // implements Message ----------------------------------------------

  ServiceRequest_Find* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceRequest_Find& from);
  void MergeFrom(const ServiceRequest_Find& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .directoryd.TxtField txt = 3;
  inline int txt_size() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 3;
  inline const ::directoryd::TxtField& txt(int index) const;
  inline ::directoryd::TxtField* mutable_txt(int index);
  inline ::directoryd::TxtField* add_txt();
  inline const ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >&
      txt() const;
  inline ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >*
      mutable_txt();

  // @@protoc_insertion_point(class_scope:directoryd.ServiceRequest.Find)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField > txt_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceRequest_Find* default_instance_;
};
// -------------------------------------------------------------------

class ServiceRequest : public ::google::protobuf::Message {
 public:
  ServiceRequest();
  virtual ~ServiceRequest();

  ServiceRequest(const ServiceRequest& from);

  inline ServiceRequest& operator=(const ServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRequest& default_instance();

  void Swap(ServiceRequest* other);

  // implements Message ----------------------------------------------

  ServiceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceRequest& from);
  void MergeFrom(const ServiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceRequest_Register Register;
  typedef ServiceRequest_Unregister Unregister;
  typedef ServiceRequest_Find Find;

  // accessors -------------------------------------------------------

  // required .directoryd.RequestType type = 1 [default = HEARTBEAT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::directoryd::RequestType type() const;
  inline void set_type(::directoryd::RequestType value);

  // optional .directoryd.ServiceRequest.Register register = 2;
  inline bool has_register_() const;
  inline void clear_register_();
  static const int kRegisterFieldNumber = 2;
  inline const ::directoryd::ServiceRequest_Register& register_() const;
  inline ::directoryd::ServiceRequest_Register* mutable_register_();
  inline ::directoryd::ServiceRequest_Register* release_register_();
  inline void set_allocated_register_(::directoryd::ServiceRequest_Register* register_);

  // optional .directoryd.ServiceRequest.Unregister unregister = 3;
  inline bool has_unregister() const;
  inline void clear_unregister();
  static const int kUnregisterFieldNumber = 3;
  inline const ::directoryd::ServiceRequest_Unregister& unregister() const;
  inline ::directoryd::ServiceRequest_Unregister* mutable_unregister();
  inline ::directoryd::ServiceRequest_Unregister* release_unregister();
  inline void set_allocated_unregister(::directoryd::ServiceRequest_Unregister* unregister);

  // optional .directoryd.ServiceRequest.Find find = 4;
  inline bool has_find() const;
  inline void clear_find();
  static const int kFindFieldNumber = 4;
  inline const ::directoryd::ServiceRequest_Find& find() const;
  inline ::directoryd::ServiceRequest_Find* mutable_find();
  inline ::directoryd::ServiceRequest_Find* release_find();
  inline void set_allocated_find(::directoryd::ServiceRequest_Find* find);

  // @@protoc_insertion_point(class_scope:directoryd.ServiceRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_register_();
  inline void clear_has_register_();
  inline void set_has_unregister();
  inline void clear_has_unregister();
  inline void set_has_find();
  inline void clear_has_find();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::directoryd::ServiceRequest_Register* register__;
  ::directoryd::ServiceRequest_Unregister* unregister_;
  ::directoryd::ServiceRequest_Find* find_;
  int type_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServiceReply_FindResult_Location : public ::google::protobuf::Message {
 public:
  ServiceReply_FindResult_Location();
  virtual ~ServiceReply_FindResult_Location();

  ServiceReply_FindResult_Location(const ServiceReply_FindResult_Location& from);

  inline ServiceReply_FindResult_Location& operator=(const ServiceReply_FindResult_Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceReply_FindResult_Location& default_instance();

  void Swap(ServiceReply_FindResult_Location* other);

  // implements Message ----------------------------------------------

  ServiceReply_FindResult_Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceReply_FindResult_Location& from);
  void MergeFrom(const ServiceReply_FindResult_Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string resource = 3;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 3;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const char* value, size_t size);
  inline ::std::string* mutable_resource();
  inline ::std::string* release_resource();
  inline void set_allocated_resource(::std::string* resource);

  // @@protoc_insertion_point(class_scope:directoryd.ServiceReply.FindResult.Location)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_resource();
  inline void clear_has_resource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* address_;
  ::std::string* resource_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceReply_FindResult_Location* default_instance_;
};
// -------------------------------------------------------------------

class ServiceReply_FindResult : public ::google::protobuf::Message {
 public:
  ServiceReply_FindResult();
  virtual ~ServiceReply_FindResult();

  ServiceReply_FindResult(const ServiceReply_FindResult& from);

  inline ServiceReply_FindResult& operator=(const ServiceReply_FindResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceReply_FindResult& default_instance();

  void Swap(ServiceReply_FindResult* other);

  // implements Message ----------------------------------------------

  ServiceReply_FindResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceReply_FindResult& from);
  void MergeFrom(const ServiceReply_FindResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceReply_FindResult_Location Location;

  // accessors -------------------------------------------------------

  // required .directoryd.ServiceReply.FindResult.Location location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::directoryd::ServiceReply_FindResult_Location& location() const;
  inline ::directoryd::ServiceReply_FindResult_Location* mutable_location();
  inline ::directoryd::ServiceReply_FindResult_Location* release_location();
  inline void set_allocated_location(::directoryd::ServiceReply_FindResult_Location* location);

  // repeated .directoryd.TxtField txt = 2;
  inline int txt_size() const;
  inline void clear_txt();
  static const int kTxtFieldNumber = 2;
  inline const ::directoryd::TxtField& txt(int index) const;
  inline ::directoryd::TxtField* mutable_txt(int index);
  inline ::directoryd::TxtField* add_txt();
  inline const ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >&
      txt() const;
  inline ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >*
      mutable_txt();

  // @@protoc_insertion_point(class_scope:directoryd.ServiceReply.FindResult)
 private:
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::directoryd::ServiceReply_FindResult_Location* location_;
  ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField > txt_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceReply_FindResult* default_instance_;
};
// -------------------------------------------------------------------

class ServiceReply : public ::google::protobuf::Message {
 public:
  ServiceReply();
  virtual ~ServiceReply();

  ServiceReply(const ServiceReply& from);

  inline ServiceReply& operator=(const ServiceReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceReply& default_instance();

  void Swap(ServiceReply* other);

  // implements Message ----------------------------------------------

  ServiceReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceReply& from);
  void MergeFrom(const ServiceReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceReply_FindResult FindResult;

  // accessors -------------------------------------------------------

  // required .directoryd.RequestType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::directoryd::RequestType type() const;
  inline void set_type(::directoryd::RequestType value);

  // required bool success = 2 [default = true];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // repeated .directoryd.ServiceReply.FindResult findresult = 4;
  inline int findresult_size() const;
  inline void clear_findresult();
  static const int kFindresultFieldNumber = 4;
  inline const ::directoryd::ServiceReply_FindResult& findresult(int index) const;
  inline ::directoryd::ServiceReply_FindResult* mutable_findresult(int index);
  inline ::directoryd::ServiceReply_FindResult* add_findresult();
  inline const ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceReply_FindResult >&
      findresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceReply_FindResult >*
      mutable_findresult();

  // @@protoc_insertion_point(class_scope:directoryd.ServiceReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  bool success_;
  ::std::string* result_;
  ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceReply_FindResult > findresult_;
  friend void  protobuf_AddDesc_Services_2eproto();
  friend void protobuf_AssignDesc_Services_2eproto();
  friend void protobuf_ShutdownFile_Services_2eproto();

  void InitAsDefaultInstance();
  static ServiceReply* default_instance_;
};
// ===================================================================


// ===================================================================

// TxtField

// required string key = 1;
inline bool TxtField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxtField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxtField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxtField::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& TxtField::key() const {
  // @@protoc_insertion_point(field_get:directoryd.TxtField.key)
  return *key_;
}
inline void TxtField::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.TxtField.key)
}
inline void TxtField::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.TxtField.key)
}
inline void TxtField::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.TxtField.key)
}
inline ::std::string* TxtField::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.TxtField.key)
  return key_;
}
inline ::std::string* TxtField::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TxtField::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.TxtField.key)
}

// required string value = 2;
inline bool TxtField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxtField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxtField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxtField::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TxtField::value() const {
  // @@protoc_insertion_point(field_get:directoryd.TxtField.value)
  return *value_;
}
inline void TxtField::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.TxtField.value)
}
inline void TxtField::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.TxtField.value)
}
inline void TxtField::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.TxtField.value)
}
inline ::std::string* TxtField::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.TxtField.value)
  return value_;
}
inline ::std::string* TxtField::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TxtField::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.TxtField.value)
}

// -------------------------------------------------------------------

// ServiceRequest_Register_Location

// required string type = 1;
inline bool ServiceRequest_Register_Location::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRequest_Register_Location::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceRequest_Register_Location::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceRequest_Register_Location::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ServiceRequest_Register_Location::type() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Register.Location.type)
  return *type_;
}
inline void ServiceRequest_Register_Location::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Register.Location.type)
}
inline void ServiceRequest_Register_Location::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceRequest.Register.Location.type)
}
inline void ServiceRequest_Register_Location::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceRequest.Register.Location.type)
}
inline ::std::string* ServiceRequest_Register_Location::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Register.Location.type)
  return type_;
}
inline ::std::string* ServiceRequest_Register_Location::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceRequest_Register_Location::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.Register.Location.type)
}

// optional int32 port = 2;
inline bool ServiceRequest_Register_Location::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRequest_Register_Location::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceRequest_Register_Location::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceRequest_Register_Location::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServiceRequest_Register_Location::port() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Register.Location.port)
  return port_;
}
inline void ServiceRequest_Register_Location::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Register.Location.port)
}

// optional string resource = 3;
inline bool ServiceRequest_Register_Location::has_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRequest_Register_Location::set_has_resource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceRequest_Register_Location::clear_has_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceRequest_Register_Location::clear_resource() {
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_->clear();
  }
  clear_has_resource();
}
inline const ::std::string& ServiceRequest_Register_Location::resource() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Register.Location.resource)
  return *resource_;
}
inline void ServiceRequest_Register_Location::set_resource(const ::std::string& value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Register.Location.resource)
}
inline void ServiceRequest_Register_Location::set_resource(const char* value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceRequest.Register.Location.resource)
}
inline void ServiceRequest_Register_Location::set_resource(const char* value, size_t size) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceRequest.Register.Location.resource)
}
inline ::std::string* ServiceRequest_Register_Location::mutable_resource() {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Register.Location.resource)
  return resource_;
}
inline ::std::string* ServiceRequest_Register_Location::release_resource() {
  clear_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resource_;
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceRequest_Register_Location::set_allocated_resource(::std::string* resource) {
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  if (resource) {
    set_has_resource();
    resource_ = resource;
  } else {
    clear_has_resource();
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.Register.Location.resource)
}

// -------------------------------------------------------------------

// ServiceRequest_Register

// required string name = 1;
inline bool ServiceRequest_Register::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRequest_Register::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceRequest_Register::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceRequest_Register::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceRequest_Register::name() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Register.name)
  return *name_;
}
inline void ServiceRequest_Register::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Register.name)
}
inline void ServiceRequest_Register::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceRequest.Register.name)
}
inline void ServiceRequest_Register::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceRequest.Register.name)
}
inline ::std::string* ServiceRequest_Register::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Register.name)
  return name_;
}
inline ::std::string* ServiceRequest_Register::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceRequest_Register::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.Register.name)
}

// repeated .directoryd.ServiceRequest.Register.Location location = 2;
inline int ServiceRequest_Register::location_size() const {
  return location_.size();
}
inline void ServiceRequest_Register::clear_location() {
  location_.Clear();
}
inline const ::directoryd::ServiceRequest_Register_Location& ServiceRequest_Register::location(int index) const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Register.location)
  return location_.Get(index);
}
inline ::directoryd::ServiceRequest_Register_Location* ServiceRequest_Register::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Register.location)
  return location_.Mutable(index);
}
inline ::directoryd::ServiceRequest_Register_Location* ServiceRequest_Register::add_location() {
  // @@protoc_insertion_point(field_add:directoryd.ServiceRequest.Register.location)
  return location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceRequest_Register_Location >&
ServiceRequest_Register::location() const {
  // @@protoc_insertion_point(field_list:directoryd.ServiceRequest.Register.location)
  return location_;
}
inline ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceRequest_Register_Location >*
ServiceRequest_Register::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:directoryd.ServiceRequest.Register.location)
  return &location_;
}

// repeated .directoryd.TxtField txt = 3;
inline int ServiceRequest_Register::txt_size() const {
  return txt_.size();
}
inline void ServiceRequest_Register::clear_txt() {
  txt_.Clear();
}
inline const ::directoryd::TxtField& ServiceRequest_Register::txt(int index) const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Register.txt)
  return txt_.Get(index);
}
inline ::directoryd::TxtField* ServiceRequest_Register::mutable_txt(int index) {
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Register.txt)
  return txt_.Mutable(index);
}
inline ::directoryd::TxtField* ServiceRequest_Register::add_txt() {
  // @@protoc_insertion_point(field_add:directoryd.ServiceRequest.Register.txt)
  return txt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >&
ServiceRequest_Register::txt() const {
  // @@protoc_insertion_point(field_list:directoryd.ServiceRequest.Register.txt)
  return txt_;
}
inline ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >*
ServiceRequest_Register::mutable_txt() {
  // @@protoc_insertion_point(field_mutable_list:directoryd.ServiceRequest.Register.txt)
  return &txt_;
}

// -------------------------------------------------------------------

// ServiceRequest_Unregister

// required string name = 1;
inline bool ServiceRequest_Unregister::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRequest_Unregister::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceRequest_Unregister::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceRequest_Unregister::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceRequest_Unregister::name() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Unregister.name)
  return *name_;
}
inline void ServiceRequest_Unregister::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Unregister.name)
}
inline void ServiceRequest_Unregister::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceRequest.Unregister.name)
}
inline void ServiceRequest_Unregister::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceRequest.Unregister.name)
}
inline ::std::string* ServiceRequest_Unregister::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Unregister.name)
  return name_;
}
inline ::std::string* ServiceRequest_Unregister::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceRequest_Unregister::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.Unregister.name)
}

// -------------------------------------------------------------------

// ServiceRequest_Find

// required string type = 1;
inline bool ServiceRequest_Find::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRequest_Find::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceRequest_Find::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceRequest_Find::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ServiceRequest_Find::type() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Find.type)
  return *type_;
}
inline void ServiceRequest_Find::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Find.type)
}
inline void ServiceRequest_Find::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceRequest.Find.type)
}
inline void ServiceRequest_Find::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceRequest.Find.type)
}
inline ::std::string* ServiceRequest_Find::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Find.type)
  return type_;
}
inline ::std::string* ServiceRequest_Find::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceRequest_Find::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.Find.type)
}

// optional string name = 2;
inline bool ServiceRequest_Find::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRequest_Find::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceRequest_Find::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceRequest_Find::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceRequest_Find::name() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Find.name)
  return *name_;
}
inline void ServiceRequest_Find::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.Find.name)
}
inline void ServiceRequest_Find::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceRequest.Find.name)
}
inline void ServiceRequest_Find::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceRequest.Find.name)
}
inline ::std::string* ServiceRequest_Find::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Find.name)
  return name_;
}
inline ::std::string* ServiceRequest_Find::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceRequest_Find::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.Find.name)
}

// repeated .directoryd.TxtField txt = 3;
inline int ServiceRequest_Find::txt_size() const {
  return txt_.size();
}
inline void ServiceRequest_Find::clear_txt() {
  txt_.Clear();
}
inline const ::directoryd::TxtField& ServiceRequest_Find::txt(int index) const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.Find.txt)
  return txt_.Get(index);
}
inline ::directoryd::TxtField* ServiceRequest_Find::mutable_txt(int index) {
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.Find.txt)
  return txt_.Mutable(index);
}
inline ::directoryd::TxtField* ServiceRequest_Find::add_txt() {
  // @@protoc_insertion_point(field_add:directoryd.ServiceRequest.Find.txt)
  return txt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >&
ServiceRequest_Find::txt() const {
  // @@protoc_insertion_point(field_list:directoryd.ServiceRequest.Find.txt)
  return txt_;
}
inline ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >*
ServiceRequest_Find::mutable_txt() {
  // @@protoc_insertion_point(field_mutable_list:directoryd.ServiceRequest.Find.txt)
  return &txt_;
}

// -------------------------------------------------------------------

// ServiceRequest

// required .directoryd.RequestType type = 1 [default = HEARTBEAT];
inline bool ServiceRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceRequest::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::directoryd::RequestType ServiceRequest::type() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.type)
  return static_cast< ::directoryd::RequestType >(type_);
}
inline void ServiceRequest::set_type(::directoryd::RequestType value) {
  assert(::directoryd::RequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:directoryd.ServiceRequest.type)
}

// optional .directoryd.ServiceRequest.Register register = 2;
inline bool ServiceRequest::has_register_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRequest::set_has_register_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceRequest::clear_has_register_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceRequest::clear_register_() {
  if (register__ != NULL) register__->::directoryd::ServiceRequest_Register::Clear();
  clear_has_register_();
}
inline const ::directoryd::ServiceRequest_Register& ServiceRequest::register_() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.register)
  return register__ != NULL ? *register__ : *default_instance_->register__;
}
inline ::directoryd::ServiceRequest_Register* ServiceRequest::mutable_register_() {
  set_has_register_();
  if (register__ == NULL) register__ = new ::directoryd::ServiceRequest_Register;
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.register)
  return register__;
}
inline ::directoryd::ServiceRequest_Register* ServiceRequest::release_register_() {
  clear_has_register_();
  ::directoryd::ServiceRequest_Register* temp = register__;
  register__ = NULL;
  return temp;
}
inline void ServiceRequest::set_allocated_register_(::directoryd::ServiceRequest_Register* register_) {
  delete register__;
  register__ = register_;
  if (register_) {
    set_has_register_();
  } else {
    clear_has_register_();
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.register)
}

// optional .directoryd.ServiceRequest.Unregister unregister = 3;
inline bool ServiceRequest::has_unregister() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRequest::set_has_unregister() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceRequest::clear_has_unregister() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceRequest::clear_unregister() {
  if (unregister_ != NULL) unregister_->::directoryd::ServiceRequest_Unregister::Clear();
  clear_has_unregister();
}
inline const ::directoryd::ServiceRequest_Unregister& ServiceRequest::unregister() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.unregister)
  return unregister_ != NULL ? *unregister_ : *default_instance_->unregister_;
}
inline ::directoryd::ServiceRequest_Unregister* ServiceRequest::mutable_unregister() {
  set_has_unregister();
  if (unregister_ == NULL) unregister_ = new ::directoryd::ServiceRequest_Unregister;
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.unregister)
  return unregister_;
}
inline ::directoryd::ServiceRequest_Unregister* ServiceRequest::release_unregister() {
  clear_has_unregister();
  ::directoryd::ServiceRequest_Unregister* temp = unregister_;
  unregister_ = NULL;
  return temp;
}
inline void ServiceRequest::set_allocated_unregister(::directoryd::ServiceRequest_Unregister* unregister) {
  delete unregister_;
  unregister_ = unregister;
  if (unregister) {
    set_has_unregister();
  } else {
    clear_has_unregister();
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.unregister)
}

// optional .directoryd.ServiceRequest.Find find = 4;
inline bool ServiceRequest::has_find() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceRequest::set_has_find() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceRequest::clear_has_find() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceRequest::clear_find() {
  if (find_ != NULL) find_->::directoryd::ServiceRequest_Find::Clear();
  clear_has_find();
}
inline const ::directoryd::ServiceRequest_Find& ServiceRequest::find() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceRequest.find)
  return find_ != NULL ? *find_ : *default_instance_->find_;
}
inline ::directoryd::ServiceRequest_Find* ServiceRequest::mutable_find() {
  set_has_find();
  if (find_ == NULL) find_ = new ::directoryd::ServiceRequest_Find;
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceRequest.find)
  return find_;
}
inline ::directoryd::ServiceRequest_Find* ServiceRequest::release_find() {
  clear_has_find();
  ::directoryd::ServiceRequest_Find* temp = find_;
  find_ = NULL;
  return temp;
}
inline void ServiceRequest::set_allocated_find(::directoryd::ServiceRequest_Find* find) {
  delete find_;
  find_ = find;
  if (find) {
    set_has_find();
  } else {
    clear_has_find();
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceRequest.find)
}

// -------------------------------------------------------------------

// ServiceReply_FindResult_Location

// optional string address = 1;
inline bool ServiceReply_FindResult_Location::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceReply_FindResult_Location::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceReply_FindResult_Location::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceReply_FindResult_Location::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& ServiceReply_FindResult_Location::address() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.FindResult.Location.address)
  return *address_;
}
inline void ServiceReply_FindResult_Location::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceReply.FindResult.Location.address)
}
inline void ServiceReply_FindResult_Location::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceReply.FindResult.Location.address)
}
inline void ServiceReply_FindResult_Location::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceReply.FindResult.Location.address)
}
inline ::std::string* ServiceReply_FindResult_Location::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceReply.FindResult.Location.address)
  return address_;
}
inline ::std::string* ServiceReply_FindResult_Location::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceReply_FindResult_Location::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceReply.FindResult.Location.address)
}

// optional int32 port = 2;
inline bool ServiceReply_FindResult_Location::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceReply_FindResult_Location::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceReply_FindResult_Location::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceReply_FindResult_Location::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServiceReply_FindResult_Location::port() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.FindResult.Location.port)
  return port_;
}
inline void ServiceReply_FindResult_Location::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:directoryd.ServiceReply.FindResult.Location.port)
}

// optional string resource = 3;
inline bool ServiceReply_FindResult_Location::has_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceReply_FindResult_Location::set_has_resource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceReply_FindResult_Location::clear_has_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceReply_FindResult_Location::clear_resource() {
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_->clear();
  }
  clear_has_resource();
}
inline const ::std::string& ServiceReply_FindResult_Location::resource() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.FindResult.Location.resource)
  return *resource_;
}
inline void ServiceReply_FindResult_Location::set_resource(const ::std::string& value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceReply.FindResult.Location.resource)
}
inline void ServiceReply_FindResult_Location::set_resource(const char* value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceReply.FindResult.Location.resource)
}
inline void ServiceReply_FindResult_Location::set_resource(const char* value, size_t size) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceReply.FindResult.Location.resource)
}
inline ::std::string* ServiceReply_FindResult_Location::mutable_resource() {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resource_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceReply.FindResult.Location.resource)
  return resource_;
}
inline ::std::string* ServiceReply_FindResult_Location::release_resource() {
  clear_has_resource();
  if (resource_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resource_;
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceReply_FindResult_Location::set_allocated_resource(::std::string* resource) {
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  if (resource) {
    set_has_resource();
    resource_ = resource;
  } else {
    clear_has_resource();
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceReply.FindResult.Location.resource)
}

// -------------------------------------------------------------------

// ServiceReply_FindResult

// required .directoryd.ServiceReply.FindResult.Location location = 1;
inline bool ServiceReply_FindResult::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceReply_FindResult::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceReply_FindResult::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceReply_FindResult::clear_location() {
  if (location_ != NULL) location_->::directoryd::ServiceReply_FindResult_Location::Clear();
  clear_has_location();
}
inline const ::directoryd::ServiceReply_FindResult_Location& ServiceReply_FindResult::location() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.FindResult.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::directoryd::ServiceReply_FindResult_Location* ServiceReply_FindResult::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::directoryd::ServiceReply_FindResult_Location;
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceReply.FindResult.location)
  return location_;
}
inline ::directoryd::ServiceReply_FindResult_Location* ServiceReply_FindResult::release_location() {
  clear_has_location();
  ::directoryd::ServiceReply_FindResult_Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void ServiceReply_FindResult::set_allocated_location(::directoryd::ServiceReply_FindResult_Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceReply.FindResult.location)
}

// repeated .directoryd.TxtField txt = 2;
inline int ServiceReply_FindResult::txt_size() const {
  return txt_.size();
}
inline void ServiceReply_FindResult::clear_txt() {
  txt_.Clear();
}
inline const ::directoryd::TxtField& ServiceReply_FindResult::txt(int index) const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.FindResult.txt)
  return txt_.Get(index);
}
inline ::directoryd::TxtField* ServiceReply_FindResult::mutable_txt(int index) {
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceReply.FindResult.txt)
  return txt_.Mutable(index);
}
inline ::directoryd::TxtField* ServiceReply_FindResult::add_txt() {
  // @@protoc_insertion_point(field_add:directoryd.ServiceReply.FindResult.txt)
  return txt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >&
ServiceReply_FindResult::txt() const {
  // @@protoc_insertion_point(field_list:directoryd.ServiceReply.FindResult.txt)
  return txt_;
}
inline ::google::protobuf::RepeatedPtrField< ::directoryd::TxtField >*
ServiceReply_FindResult::mutable_txt() {
  // @@protoc_insertion_point(field_mutable_list:directoryd.ServiceReply.FindResult.txt)
  return &txt_;
}

// -------------------------------------------------------------------

// ServiceReply

// required .directoryd.RequestType type = 1;
inline bool ServiceReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceReply::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::directoryd::RequestType ServiceReply::type() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.type)
  return static_cast< ::directoryd::RequestType >(type_);
}
inline void ServiceReply::set_type(::directoryd::RequestType value) {
  assert(::directoryd::RequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:directoryd.ServiceReply.type)
}

// required bool success = 2 [default = true];
inline bool ServiceReply::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceReply::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceReply::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceReply::clear_success() {
  success_ = true;
  clear_has_success();
}
inline bool ServiceReply::success() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.success)
  return success_;
}
inline void ServiceReply::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:directoryd.ServiceReply.success)
}

// optional string result = 3;
inline bool ServiceReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceReply::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& ServiceReply::result() const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.result)
  return *result_;
}
inline void ServiceReply::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:directoryd.ServiceReply.result)
}
inline void ServiceReply::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:directoryd.ServiceReply.result)
}
inline void ServiceReply::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:directoryd.ServiceReply.result)
}
inline ::std::string* ServiceReply::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceReply.result)
  return result_;
}
inline ::std::string* ServiceReply::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceReply::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:directoryd.ServiceReply.result)
}

// repeated .directoryd.ServiceReply.FindResult findresult = 4;
inline int ServiceReply::findresult_size() const {
  return findresult_.size();
}
inline void ServiceReply::clear_findresult() {
  findresult_.Clear();
}
inline const ::directoryd::ServiceReply_FindResult& ServiceReply::findresult(int index) const {
  // @@protoc_insertion_point(field_get:directoryd.ServiceReply.findresult)
  return findresult_.Get(index);
}
inline ::directoryd::ServiceReply_FindResult* ServiceReply::mutable_findresult(int index) {
  // @@protoc_insertion_point(field_mutable:directoryd.ServiceReply.findresult)
  return findresult_.Mutable(index);
}
inline ::directoryd::ServiceReply_FindResult* ServiceReply::add_findresult() {
  // @@protoc_insertion_point(field_add:directoryd.ServiceReply.findresult)
  return findresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceReply_FindResult >&
ServiceReply::findresult() const {
  // @@protoc_insertion_point(field_list:directoryd.ServiceReply.findresult)
  return findresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::directoryd::ServiceReply_FindResult >*
ServiceReply::mutable_findresult() {
  // @@protoc_insertion_point(field_mutable_list:directoryd.ServiceReply.findresult)
  return &findresult_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace directoryd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::directoryd::RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::directoryd::RequestType>() {
  return ::directoryd::RequestType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Services_2eproto__INCLUDED
