// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Services.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Services.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace directoryd {

namespace {

const ::google::protobuf::Descriptor* TxtField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxtField_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRequest_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRequest_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRequest_Register_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRequest_Register_Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRequest_Unregister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRequest_Unregister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRequest_Find_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRequest_Find_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceReply_FindResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReply_FindResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceReply_FindResult_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReply_FindResult_Location_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Services_2eproto() {
  protobuf_AddDesc_Services_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Services.proto");
  GOOGLE_CHECK(file != NULL);
  TxtField_descriptor_ = file->message_type(0);
  static const int TxtField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxtField, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxtField, value_),
  };
  TxtField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxtField_descriptor_,
      TxtField::default_instance_,
      TxtField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxtField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxtField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxtField));
  ServiceRequest_descriptor_ = file->message_type(1);
  static const int ServiceRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, register__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, unregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, find_),
  };
  ServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRequest_descriptor_,
      ServiceRequest::default_instance_,
      ServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRequest));
  ServiceRequest_Register_descriptor_ = ServiceRequest_descriptor_->nested_type(0);
  static const int ServiceRequest_Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register, txt_),
  };
  ServiceRequest_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRequest_Register_descriptor_,
      ServiceRequest_Register::default_instance_,
      ServiceRequest_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRequest_Register));
  ServiceRequest_Register_Location_descriptor_ = ServiceRequest_Register_descriptor_->nested_type(0);
  static const int ServiceRequest_Register_Location_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register_Location, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register_Location, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register_Location, resource_),
  };
  ServiceRequest_Register_Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRequest_Register_Location_descriptor_,
      ServiceRequest_Register_Location::default_instance_,
      ServiceRequest_Register_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register_Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Register_Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRequest_Register_Location));
  ServiceRequest_Unregister_descriptor_ = ServiceRequest_descriptor_->nested_type(1);
  static const int ServiceRequest_Unregister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Unregister, name_),
  };
  ServiceRequest_Unregister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRequest_Unregister_descriptor_,
      ServiceRequest_Unregister::default_instance_,
      ServiceRequest_Unregister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Unregister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Unregister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRequest_Unregister));
  ServiceRequest_Find_descriptor_ = ServiceRequest_descriptor_->nested_type(2);
  static const int ServiceRequest_Find_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Find, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Find, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Find, txt_),
  };
  ServiceRequest_Find_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceRequest_Find_descriptor_,
      ServiceRequest_Find::default_instance_,
      ServiceRequest_Find_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Find, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest_Find, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceRequest_Find));
  ServiceReply_descriptor_ = file->message_type(2);
  static const int ServiceReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, findresult_),
  };
  ServiceReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceReply_descriptor_,
      ServiceReply::default_instance_,
      ServiceReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceReply));
  ServiceReply_FindResult_descriptor_ = ServiceReply_descriptor_->nested_type(0);
  static const int ServiceReply_FindResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult, txt_),
  };
  ServiceReply_FindResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceReply_FindResult_descriptor_,
      ServiceReply_FindResult::default_instance_,
      ServiceReply_FindResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceReply_FindResult));
  ServiceReply_FindResult_Location_descriptor_ = ServiceReply_FindResult_descriptor_->nested_type(0);
  static const int ServiceReply_FindResult_Location_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult_Location, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult_Location, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult_Location, resource_),
  };
  ServiceReply_FindResult_Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceReply_FindResult_Location_descriptor_,
      ServiceReply_FindResult_Location::default_instance_,
      ServiceReply_FindResult_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult_Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply_FindResult_Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceReply_FindResult_Location));
  RequestType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Services_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxtField_descriptor_, &TxtField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRequest_descriptor_, &ServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRequest_Register_descriptor_, &ServiceRequest_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRequest_Register_Location_descriptor_, &ServiceRequest_Register_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRequest_Unregister_descriptor_, &ServiceRequest_Unregister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceRequest_Find_descriptor_, &ServiceRequest_Find::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceReply_descriptor_, &ServiceReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceReply_FindResult_descriptor_, &ServiceReply_FindResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceReply_FindResult_Location_descriptor_, &ServiceReply_FindResult_Location::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Services_2eproto() {
  delete TxtField::default_instance_;
  delete TxtField_reflection_;
  delete ServiceRequest::default_instance_;
  delete ServiceRequest_reflection_;
  delete ServiceRequest_Register::default_instance_;
  delete ServiceRequest_Register_reflection_;
  delete ServiceRequest_Register_Location::default_instance_;
  delete ServiceRequest_Register_Location_reflection_;
  delete ServiceRequest_Unregister::default_instance_;
  delete ServiceRequest_Unregister_reflection_;
  delete ServiceRequest_Find::default_instance_;
  delete ServiceRequest_Find_reflection_;
  delete ServiceReply::default_instance_;
  delete ServiceReply_reflection_;
  delete ServiceReply_FindResult::default_instance_;
  delete ServiceReply_FindResult_reflection_;
  delete ServiceReply_FindResult_Location::default_instance_;
  delete ServiceReply_FindResult_Location_reflection_;
}

void protobuf_AddDesc_Services_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Services.proto\022\ndirectoryd\"&\n\010TxtField"
    "\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\376\003\n\016Service"
    "Request\0220\n\004type\030\001 \002(\0162\027.directoryd.Reque"
    "stType:\tHEARTBEAT\0225\n\010register\030\002 \001(\0132#.di"
    "rectoryd.ServiceRequest.Register\0229\n\nunre"
    "gister\030\003 \001(\0132%.directoryd.ServiceRequest"
    ".Unregister\022-\n\004find\030\004 \001(\0132\037.directoryd.S"
    "erviceRequest.Find\032\265\001\n\010Register\022\014\n\004name\030"
    "\001 \002(\t\022>\n\010location\030\002 \003(\0132,.directoryd.Ser"
    "viceRequest.Register.Location\022!\n\003txt\030\003 \003"
    "(\0132\024.directoryd.TxtField\0328\n\010Location\022\014\n\004"
    "type\030\001 \002(\t\022\014\n\004port\030\002 \001(\005\022\020\n\010resource\030\003 \001"
    "(\t\032\032\n\nUnregister\022\014\n\004name\030\001 \002(\t\032E\n\004Find\022\014"
    "\n\004type\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022!\n\003txt\030\003 \003(\0132"
    "\024.directoryd.TxtField\"\304\002\n\014ServiceReply\022%"
    "\n\004type\030\001 \002(\0162\027.directoryd.RequestType\022\025\n"
    "\007success\030\002 \002(\010:\004true\022\016\n\006result\030\003 \001(\t\0227\n\n"
    "findresult\030\004 \003(\0132#.directoryd.ServiceRep"
    "ly.FindResult\032\254\001\n\nFindResult\022>\n\010location"
    "\030\001 \002(\0132,.directoryd.ServiceReply.FindRes"
    "ult.Location\022!\n\003txt\030\002 \003(\0132\024.directoryd.T"
    "xtField\032;\n\010Location\022\017\n\007address\030\001 \001(\t\022\014\n\004"
    "port\030\002 \001(\005\022\020\n\010resource\030\003 \001(\t*D\n\013RequestT"
    "ype\022\014\n\010REGISTER\020\001\022\016\n\nUNREGISTER\020\002\022\010\n\004FIN"
    "D\020\003\022\r\n\tHEARTBEAT\020\004", 978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Services.proto", &protobuf_RegisterTypes);
  TxtField::default_instance_ = new TxtField();
  ServiceRequest::default_instance_ = new ServiceRequest();
  ServiceRequest_Register::default_instance_ = new ServiceRequest_Register();
  ServiceRequest_Register_Location::default_instance_ = new ServiceRequest_Register_Location();
  ServiceRequest_Unregister::default_instance_ = new ServiceRequest_Unregister();
  ServiceRequest_Find::default_instance_ = new ServiceRequest_Find();
  ServiceReply::default_instance_ = new ServiceReply();
  ServiceReply_FindResult::default_instance_ = new ServiceReply_FindResult();
  ServiceReply_FindResult_Location::default_instance_ = new ServiceReply_FindResult_Location();
  TxtField::default_instance_->InitAsDefaultInstance();
  ServiceRequest::default_instance_->InitAsDefaultInstance();
  ServiceRequest_Register::default_instance_->InitAsDefaultInstance();
  ServiceRequest_Register_Location::default_instance_->InitAsDefaultInstance();
  ServiceRequest_Unregister::default_instance_->InitAsDefaultInstance();
  ServiceRequest_Find::default_instance_->InitAsDefaultInstance();
  ServiceReply::default_instance_->InitAsDefaultInstance();
  ServiceReply_FindResult::default_instance_->InitAsDefaultInstance();
  ServiceReply_FindResult_Location::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Services_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Services_2eproto {
  StaticDescriptorInitializer_Services_2eproto() {
    protobuf_AddDesc_Services_2eproto();
  }
} static_descriptor_initializer_Services_2eproto_;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TxtField::kKeyFieldNumber;
const int TxtField::kValueFieldNumber;
#endif  // !_MSC_VER

TxtField::TxtField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.TxtField)
}

void TxtField::InitAsDefaultInstance() {
}

TxtField::TxtField(const TxtField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.TxtField)
}

void TxtField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxtField::~TxtField() {
  // @@protoc_insertion_point(destructor:directoryd.TxtField)
  SharedDtor();
}

void TxtField::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TxtField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxtField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxtField_descriptor_;
}

const TxtField& TxtField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

TxtField* TxtField::default_instance_ = NULL;

TxtField* TxtField::New() const {
  return new TxtField;
}

void TxtField::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxtField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.TxtField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.TxtField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.TxtField)
  return false;
#undef DO_
}

void TxtField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.TxtField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.TxtField)
}

::google::protobuf::uint8* TxtField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.TxtField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.TxtField)
  return target;
}

int TxtField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxtField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxtField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxtField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxtField::MergeFrom(const TxtField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxtField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxtField::CopyFrom(const TxtField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxtField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TxtField::Swap(TxtField* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxtField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxtField_descriptor_;
  metadata.reflection = TxtField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRequest_Register_Location::kTypeFieldNumber;
const int ServiceRequest_Register_Location::kPortFieldNumber;
const int ServiceRequest_Register_Location::kResourceFieldNumber;
#endif  // !_MSC_VER

ServiceRequest_Register_Location::ServiceRequest_Register_Location()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceRequest.Register.Location)
}

void ServiceRequest_Register_Location::InitAsDefaultInstance() {
}

ServiceRequest_Register_Location::ServiceRequest_Register_Location(const ServiceRequest_Register_Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceRequest.Register.Location)
}

void ServiceRequest_Register_Location::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRequest_Register_Location::~ServiceRequest_Register_Location() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceRequest.Register.Location)
  SharedDtor();
}

void ServiceRequest_Register_Location::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void ServiceRequest_Register_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest_Register_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRequest_Register_Location_descriptor_;
}

const ServiceRequest_Register_Location& ServiceRequest_Register_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceRequest_Register_Location* ServiceRequest_Register_Location::default_instance_ = NULL;

ServiceRequest_Register_Location* ServiceRequest_Register_Location::New() const {
  return new ServiceRequest_Register_Location;
}

void ServiceRequest_Register_Location::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    port_ = 0;
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRequest_Register_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceRequest.Register.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resource");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceRequest.Register.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceRequest.Register.Location)
  return false;
#undef DO_
}

void ServiceRequest_Register_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceRequest.Register.Location)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceRequest.Register.Location)
}

::google::protobuf::uint8* ServiceRequest_Register_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceRequest.Register.Location)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceRequest.Register.Location)
  return target;
}

int ServiceRequest_Register_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRequest_Register_Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRequest_Register_Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRequest_Register_Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRequest_Register_Location::MergeFrom(const ServiceRequest_Register_Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRequest_Register_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRequest_Register_Location::CopyFrom(const ServiceRequest_Register_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest_Register_Location::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceRequest_Register_Location::Swap(ServiceRequest_Register_Location* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(port_, other->port_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRequest_Register_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRequest_Register_Location_descriptor_;
  metadata.reflection = ServiceRequest_Register_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceRequest_Register::kNameFieldNumber;
const int ServiceRequest_Register::kLocationFieldNumber;
const int ServiceRequest_Register::kTxtFieldNumber;
#endif  // !_MSC_VER

ServiceRequest_Register::ServiceRequest_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceRequest.Register)
}

void ServiceRequest_Register::InitAsDefaultInstance() {
}

ServiceRequest_Register::ServiceRequest_Register(const ServiceRequest_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceRequest.Register)
}

void ServiceRequest_Register::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRequest_Register::~ServiceRequest_Register() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceRequest.Register)
  SharedDtor();
}

void ServiceRequest_Register::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceRequest_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRequest_Register_descriptor_;
}

const ServiceRequest_Register& ServiceRequest_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceRequest_Register* ServiceRequest_Register::default_instance_ = NULL;

ServiceRequest_Register* ServiceRequest_Register::New() const {
  return new ServiceRequest_Register;
}

void ServiceRequest_Register::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  location_.Clear();
  txt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRequest_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceRequest.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // repeated .directoryd.ServiceRequest.Register.Location location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        if (input->ExpectTag(26)) goto parse_txt;
        break;
      }

      // repeated .directoryd.TxtField txt = 3;
      case 3: {
        if (tag == 26) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_txt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceRequest.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceRequest.Register)
  return false;
#undef DO_
}

void ServiceRequest_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceRequest.Register)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .directoryd.ServiceRequest.Register.Location location = 2;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location(i), output);
  }

  // repeated .directoryd.TxtField txt = 3;
  for (int i = 0; i < this->txt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->txt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceRequest.Register)
}

::google::protobuf::uint8* ServiceRequest_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceRequest.Register)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .directoryd.ServiceRequest.Register.Location location = 2;
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(i), target);
  }

  // repeated .directoryd.TxtField txt = 3;
  for (int i = 0; i < this->txt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->txt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceRequest.Register)
  return target;
}

int ServiceRequest_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .directoryd.ServiceRequest.Register.Location location = 2;
  total_size += 1 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->location(i));
  }

  // repeated .directoryd.TxtField txt = 3;
  total_size += 1 * this->txt_size();
  for (int i = 0; i < this->txt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRequest_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRequest_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRequest_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRequest_Register::MergeFrom(const ServiceRequest_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  location_.MergeFrom(from.location_);
  txt_.MergeFrom(from.txt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRequest_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRequest_Register::CopyFrom(const ServiceRequest_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->location())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->txt())) return false;
  return true;
}

void ServiceRequest_Register::Swap(ServiceRequest_Register* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    location_.Swap(&other->location_);
    txt_.Swap(&other->txt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRequest_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRequest_Register_descriptor_;
  metadata.reflection = ServiceRequest_Register_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceRequest_Unregister::kNameFieldNumber;
#endif  // !_MSC_VER

ServiceRequest_Unregister::ServiceRequest_Unregister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceRequest.Unregister)
}

void ServiceRequest_Unregister::InitAsDefaultInstance() {
}

ServiceRequest_Unregister::ServiceRequest_Unregister(const ServiceRequest_Unregister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceRequest.Unregister)
}

void ServiceRequest_Unregister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRequest_Unregister::~ServiceRequest_Unregister() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceRequest.Unregister)
  SharedDtor();
}

void ServiceRequest_Unregister::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceRequest_Unregister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest_Unregister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRequest_Unregister_descriptor_;
}

const ServiceRequest_Unregister& ServiceRequest_Unregister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceRequest_Unregister* ServiceRequest_Unregister::default_instance_ = NULL;

ServiceRequest_Unregister* ServiceRequest_Unregister::New() const {
  return new ServiceRequest_Unregister;
}

void ServiceRequest_Unregister::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRequest_Unregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceRequest.Unregister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceRequest.Unregister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceRequest.Unregister)
  return false;
#undef DO_
}

void ServiceRequest_Unregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceRequest.Unregister)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceRequest.Unregister)
}

::google::protobuf::uint8* ServiceRequest_Unregister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceRequest.Unregister)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceRequest.Unregister)
  return target;
}

int ServiceRequest_Unregister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRequest_Unregister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRequest_Unregister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRequest_Unregister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRequest_Unregister::MergeFrom(const ServiceRequest_Unregister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRequest_Unregister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRequest_Unregister::CopyFrom(const ServiceRequest_Unregister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest_Unregister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceRequest_Unregister::Swap(ServiceRequest_Unregister* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRequest_Unregister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRequest_Unregister_descriptor_;
  metadata.reflection = ServiceRequest_Unregister_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceRequest_Find::kTypeFieldNumber;
const int ServiceRequest_Find::kNameFieldNumber;
const int ServiceRequest_Find::kTxtFieldNumber;
#endif  // !_MSC_VER

ServiceRequest_Find::ServiceRequest_Find()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceRequest.Find)
}

void ServiceRequest_Find::InitAsDefaultInstance() {
}

ServiceRequest_Find::ServiceRequest_Find(const ServiceRequest_Find& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceRequest.Find)
}

void ServiceRequest_Find::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRequest_Find::~ServiceRequest_Find() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceRequest.Find)
  SharedDtor();
}

void ServiceRequest_Find::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceRequest_Find::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest_Find::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRequest_Find_descriptor_;
}

const ServiceRequest_Find& ServiceRequest_Find::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceRequest_Find* ServiceRequest_Find::default_instance_ = NULL;

ServiceRequest_Find* ServiceRequest_Find::New() const {
  return new ServiceRequest_Find;
}

void ServiceRequest_Find::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  txt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRequest_Find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceRequest.Find)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txt;
        break;
      }

      // repeated .directoryd.TxtField txt = 3;
      case 3: {
        if (tag == 26) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_txt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceRequest.Find)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceRequest.Find)
  return false;
#undef DO_
}

void ServiceRequest_Find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceRequest.Find)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .directoryd.TxtField txt = 3;
  for (int i = 0; i < this->txt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->txt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceRequest.Find)
}

::google::protobuf::uint8* ServiceRequest_Find::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceRequest.Find)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .directoryd.TxtField txt = 3;
  for (int i = 0; i < this->txt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->txt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceRequest.Find)
  return target;
}

int ServiceRequest_Find::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .directoryd.TxtField txt = 3;
  total_size += 1 * this->txt_size();
  for (int i = 0; i < this->txt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRequest_Find::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRequest_Find* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRequest_Find*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRequest_Find::MergeFrom(const ServiceRequest_Find& from) {
  GOOGLE_CHECK_NE(&from, this);
  txt_.MergeFrom(from.txt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRequest_Find::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRequest_Find::CopyFrom(const ServiceRequest_Find& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest_Find::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->txt())) return false;
  return true;
}

void ServiceRequest_Find::Swap(ServiceRequest_Find* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    txt_.Swap(&other->txt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRequest_Find::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRequest_Find_descriptor_;
  metadata.reflection = ServiceRequest_Find_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceRequest::kTypeFieldNumber;
const int ServiceRequest::kRegisterFieldNumber;
const int ServiceRequest::kUnregisterFieldNumber;
const int ServiceRequest::kFindFieldNumber;
#endif  // !_MSC_VER

ServiceRequest::ServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceRequest)
}

void ServiceRequest::InitAsDefaultInstance() {
  register__ = const_cast< ::directoryd::ServiceRequest_Register*>(&::directoryd::ServiceRequest_Register::default_instance());
  unregister_ = const_cast< ::directoryd::ServiceRequest_Unregister*>(&::directoryd::ServiceRequest_Unregister::default_instance());
  find_ = const_cast< ::directoryd::ServiceRequest_Find*>(&::directoryd::ServiceRequest_Find::default_instance());
}

ServiceRequest::ServiceRequest(const ServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceRequest)
}

void ServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 4;
  register__ = NULL;
  unregister_ = NULL;
  find_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRequest::~ServiceRequest() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceRequest)
  SharedDtor();
}

void ServiceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete register__;
    delete unregister_;
    delete find_;
  }
}

void ServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRequest_descriptor_;
}

const ServiceRequest& ServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceRequest* ServiceRequest::default_instance_ = NULL;

ServiceRequest* ServiceRequest::New() const {
  return new ServiceRequest;
}

void ServiceRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 4;
    if (has_register_()) {
      if (register__ != NULL) register__->::directoryd::ServiceRequest_Register::Clear();
    }
    if (has_unregister()) {
      if (unregister_ != NULL) unregister_->::directoryd::ServiceRequest_Unregister::Clear();
    }
    if (has_find()) {
      if (find_ != NULL) find_->::directoryd::ServiceRequest_Find::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .directoryd.RequestType type = 1 [default = HEARTBEAT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::directoryd::RequestType_IsValid(value)) {
            set_type(static_cast< ::directoryd::RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_register;
        break;
      }

      // optional .directoryd.ServiceRequest.Register register = 2;
      case 2: {
        if (tag == 18) {
         parse_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unregister;
        break;
      }

      // optional .directoryd.ServiceRequest.Unregister unregister = 3;
      case 3: {
        if (tag == 26) {
         parse_unregister:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unregister()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_find;
        break;
      }

      // optional .directoryd.ServiceRequest.Find find = 4;
      case 4: {
        if (tag == 34) {
         parse_find:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_find()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceRequest)
  return false;
#undef DO_
}

void ServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceRequest)
  // required .directoryd.RequestType type = 1 [default = HEARTBEAT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .directoryd.ServiceRequest.Register register = 2;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->register_(), output);
  }

  // optional .directoryd.ServiceRequest.Unregister unregister = 3;
  if (has_unregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unregister(), output);
  }

  // optional .directoryd.ServiceRequest.Find find = 4;
  if (has_find()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->find(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceRequest)
}

::google::protobuf::uint8* ServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceRequest)
  // required .directoryd.RequestType type = 1 [default = HEARTBEAT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .directoryd.ServiceRequest.Register register = 2;
  if (has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->register_(), target);
  }

  // optional .directoryd.ServiceRequest.Unregister unregister = 3;
  if (has_unregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unregister(), target);
  }

  // optional .directoryd.ServiceRequest.Find find = 4;
  if (has_find()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->find(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceRequest)
  return target;
}

int ServiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .directoryd.RequestType type = 1 [default = HEARTBEAT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .directoryd.ServiceRequest.Register register = 2;
    if (has_register_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_());
    }

    // optional .directoryd.ServiceRequest.Unregister unregister = 3;
    if (has_unregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unregister());
    }

    // optional .directoryd.ServiceRequest.Find find = 4;
    if (has_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->find());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceRequest::MergeFrom(const ServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_register_()) {
      mutable_register_()->::directoryd::ServiceRequest_Register::MergeFrom(from.register_());
    }
    if (from.has_unregister()) {
      mutable_unregister()->::directoryd::ServiceRequest_Unregister::MergeFrom(from.unregister());
    }
    if (from.has_find()) {
      mutable_find()->::directoryd::ServiceRequest_Find::MergeFrom(from.find());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRequest::CopyFrom(const ServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_register_()) {
    if (!this->register_().IsInitialized()) return false;
  }
  if (has_unregister()) {
    if (!this->unregister().IsInitialized()) return false;
  }
  if (has_find()) {
    if (!this->find().IsInitialized()) return false;
  }
  return true;
}

void ServiceRequest::Swap(ServiceRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(register__, other->register__);
    std::swap(unregister_, other->unregister_);
    std::swap(find_, other->find_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRequest_descriptor_;
  metadata.reflection = ServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceReply_FindResult_Location::kAddressFieldNumber;
const int ServiceReply_FindResult_Location::kPortFieldNumber;
const int ServiceReply_FindResult_Location::kResourceFieldNumber;
#endif  // !_MSC_VER

ServiceReply_FindResult_Location::ServiceReply_FindResult_Location()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceReply.FindResult.Location)
}

void ServiceReply_FindResult_Location::InitAsDefaultInstance() {
}

ServiceReply_FindResult_Location::ServiceReply_FindResult_Location(const ServiceReply_FindResult_Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceReply.FindResult.Location)
}

void ServiceReply_FindResult_Location::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReply_FindResult_Location::~ServiceReply_FindResult_Location() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceReply.FindResult.Location)
  SharedDtor();
}

void ServiceReply_FindResult_Location::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void ServiceReply_FindResult_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReply_FindResult_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReply_FindResult_Location_descriptor_;
}

const ServiceReply_FindResult_Location& ServiceReply_FindResult_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceReply_FindResult_Location* ServiceReply_FindResult_Location::default_instance_ = NULL;

ServiceReply_FindResult_Location* ServiceReply_FindResult_Location::New() const {
  return new ServiceReply_FindResult_Location;
}

void ServiceReply_FindResult_Location::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    port_ = 0;
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceReply_FindResult_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceReply.FindResult.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resource");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceReply.FindResult.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceReply.FindResult.Location)
  return false;
#undef DO_
}

void ServiceReply_FindResult_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceReply.FindResult.Location)
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceReply.FindResult.Location)
}

::google::protobuf::uint8* ServiceReply_FindResult_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceReply.FindResult.Location)
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceReply.FindResult.Location)
  return target;
}

int ServiceReply_FindResult_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReply_FindResult_Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceReply_FindResult_Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceReply_FindResult_Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceReply_FindResult_Location::MergeFrom(const ServiceReply_FindResult_Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceReply_FindResult_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReply_FindResult_Location::CopyFrom(const ServiceReply_FindResult_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply_FindResult_Location::IsInitialized() const {

  return true;
}

void ServiceReply_FindResult_Location::Swap(ServiceReply_FindResult_Location* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceReply_FindResult_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReply_FindResult_Location_descriptor_;
  metadata.reflection = ServiceReply_FindResult_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceReply_FindResult::kLocationFieldNumber;
const int ServiceReply_FindResult::kTxtFieldNumber;
#endif  // !_MSC_VER

ServiceReply_FindResult::ServiceReply_FindResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceReply.FindResult)
}

void ServiceReply_FindResult::InitAsDefaultInstance() {
  location_ = const_cast< ::directoryd::ServiceReply_FindResult_Location*>(&::directoryd::ServiceReply_FindResult_Location::default_instance());
}

ServiceReply_FindResult::ServiceReply_FindResult(const ServiceReply_FindResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceReply.FindResult)
}

void ServiceReply_FindResult::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReply_FindResult::~ServiceReply_FindResult() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceReply.FindResult)
  SharedDtor();
}

void ServiceReply_FindResult::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void ServiceReply_FindResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReply_FindResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReply_FindResult_descriptor_;
}

const ServiceReply_FindResult& ServiceReply_FindResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceReply_FindResult* ServiceReply_FindResult::default_instance_ = NULL;

ServiceReply_FindResult* ServiceReply_FindResult::New() const {
  return new ServiceReply_FindResult;
}

void ServiceReply_FindResult::Clear() {
  if (has_location()) {
    if (location_ != NULL) location_->::directoryd::ServiceReply_FindResult_Location::Clear();
  }
  txt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceReply_FindResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceReply.FindResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .directoryd.ServiceReply.FindResult.Location location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txt;
        break;
      }

      // repeated .directoryd.TxtField txt = 2;
      case 2: {
        if (tag == 18) {
         parse_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_txt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceReply.FindResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceReply.FindResult)
  return false;
#undef DO_
}

void ServiceReply_FindResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceReply.FindResult)
  // required .directoryd.ServiceReply.FindResult.Location location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // repeated .directoryd.TxtField txt = 2;
  for (int i = 0; i < this->txt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->txt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceReply.FindResult)
}

::google::protobuf::uint8* ServiceReply_FindResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceReply.FindResult)
  // required .directoryd.ServiceReply.FindResult.Location location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // repeated .directoryd.TxtField txt = 2;
  for (int i = 0; i < this->txt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->txt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceReply.FindResult)
  return target;
}

int ServiceReply_FindResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .directoryd.ServiceReply.FindResult.Location location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  // repeated .directoryd.TxtField txt = 2;
  total_size += 1 * this->txt_size();
  for (int i = 0; i < this->txt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReply_FindResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceReply_FindResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceReply_FindResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceReply_FindResult::MergeFrom(const ServiceReply_FindResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  txt_.MergeFrom(from.txt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::directoryd::ServiceReply_FindResult_Location::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceReply_FindResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReply_FindResult::CopyFrom(const ServiceReply_FindResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply_FindResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->txt())) return false;
  return true;
}

void ServiceReply_FindResult::Swap(ServiceReply_FindResult* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    txt_.Swap(&other->txt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceReply_FindResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReply_FindResult_descriptor_;
  metadata.reflection = ServiceReply_FindResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceReply::kTypeFieldNumber;
const int ServiceReply::kSuccessFieldNumber;
const int ServiceReply::kResultFieldNumber;
const int ServiceReply::kFindresultFieldNumber;
#endif  // !_MSC_VER

ServiceReply::ServiceReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:directoryd.ServiceReply)
}

void ServiceReply::InitAsDefaultInstance() {
}

ServiceReply::ServiceReply(const ServiceReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:directoryd.ServiceReply)
}

void ServiceReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  success_ = true;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReply::~ServiceReply() {
  // @@protoc_insertion_point(destructor:directoryd.ServiceReply)
  SharedDtor();
}

void ServiceReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void ServiceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReply_descriptor_;
}

const ServiceReply& ServiceReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Services_2eproto();
  return *default_instance_;
}

ServiceReply* ServiceReply::default_instance_ = NULL;

ServiceReply* ServiceReply::New() const {
  return new ServiceReply;
}

void ServiceReply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    success_ = true;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
  }
  findresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:directoryd.ServiceReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .directoryd.RequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::directoryd::RequestType_IsValid(value)) {
            set_type(static_cast< ::directoryd::RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional string result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_findresult;
        break;
      }

      // repeated .directoryd.ServiceReply.FindResult findresult = 4;
      case 4: {
        if (tag == 34) {
         parse_findresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_findresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_findresult;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:directoryd.ServiceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:directoryd.ServiceReply)
  return false;
#undef DO_
}

void ServiceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:directoryd.ServiceReply)
  // required .directoryd.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bool success = 2 [default = true];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional string result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result(), output);
  }

  // repeated .directoryd.ServiceReply.FindResult findresult = 4;
  for (int i = 0; i < this->findresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->findresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:directoryd.ServiceReply)
}

::google::protobuf::uint8* ServiceReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:directoryd.ServiceReply)
  // required .directoryd.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bool success = 2 [default = true];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional string result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }

  // repeated .directoryd.ServiceReply.FindResult findresult = 4;
  for (int i = 0; i < this->findresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->findresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:directoryd.ServiceReply)
  return target;
}

int ServiceReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .directoryd.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool success = 2 [default = true];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  // repeated .directoryd.ServiceReply.FindResult findresult = 4;
  total_size += 1 * this->findresult_size();
  for (int i = 0; i < this->findresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->findresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceReply::MergeFrom(const ServiceReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  findresult_.MergeFrom(from.findresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReply::CopyFrom(const ServiceReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->findresult())) return false;
  return true;
}

void ServiceReply::Swap(ServiceReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(success_, other->success_);
    std::swap(result_, other->result_);
    findresult_.Swap(&other->findresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReply_descriptor_;
  metadata.reflection = ServiceReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace directoryd

// @@protoc_insertion_point(global_scope)
